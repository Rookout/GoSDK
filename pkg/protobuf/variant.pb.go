





package protobuf2

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)


type Variant_Type int32

const (
	Variant_VARIANT_NONE              Variant_Type = 0
	Variant_VARIANT_INT               Variant_Type = 1
	Variant_VARIANT_LONG              Variant_Type = 2
	Variant_VARIANT_DOUBLE            Variant_Type = 3
	Variant_VARIANT_BINARY            Variant_Type = 4
	Variant_VARIANT_STRING            Variant_Type = 5
	Variant_VARIANT_LIST              Variant_Type = 6
	Variant_VARIANT_MAP               Variant_Type = 7
	Variant_VARIANT_OBJECT            Variant_Type = 8
	Variant_VARIANT_NAMESPACE         Variant_Type = 9
	Variant_VARIANT_ERROR             Variant_Type = 10
	Variant_VARIANT_NOT_SUPPORTED     Variant_Type = 11
	Variant_VARIANT_MAX_DEPTH         Variant_Type = 12
	Variant_VARIANT_FORMATTED_MESSAGE Variant_Type = 13
	Variant_VARIANT_TIME              Variant_Type = 14
	Variant_VARIANT_UKNOWN_OBJECT     Variant_Type = 15
	Variant_VARIANT_CODE_OBJECT       Variant_Type = 16
	Variant_VARIANT_LARGE_INT         Variant_Type = 17
	Variant_VARIANT_COMPLEX           Variant_Type = 18
	Variant_VARIANT_UNDEFINED         Variant_Type = 19
	Variant_VARIANT_DYNAMIC           Variant_Type = 20
	Variant_VARIANT_ENUM              Variant_Type = 21
	Variant_VARIANT_TRACEBACK         Variant_Type = 22
	Variant_VARIANT_LIVETAIL          Variant_Type = 23
	Variant_VARIANT_SET               Variant_Type = 24 
)


var (
	Variant_Type_name = map[int32]string{
		0:  "VARIANT_NONE",
		1:  "VARIANT_INT",
		2:  "VARIANT_LONG",
		3:  "VARIANT_DOUBLE",
		4:  "VARIANT_BINARY",
		5:  "VARIANT_STRING",
		6:  "VARIANT_LIST",
		7:  "VARIANT_MAP",
		8:  "VARIANT_OBJECT",
		9:  "VARIANT_NAMESPACE",
		10: "VARIANT_ERROR",
		11: "VARIANT_NOT_SUPPORTED",
		12: "VARIANT_MAX_DEPTH",
		13: "VARIANT_FORMATTED_MESSAGE",
		14: "VARIANT_TIME",
		15: "VARIANT_UKNOWN_OBJECT",
		16: "VARIANT_CODE_OBJECT",
		17: "VARIANT_LARGE_INT",
		18: "VARIANT_COMPLEX",
		19: "VARIANT_UNDEFINED",
		20: "VARIANT_DYNAMIC",
		21: "VARIANT_ENUM",
		22: "VARIANT_TRACEBACK",
		23: "VARIANT_LIVETAIL",
		24: "VARIANT_SET",
	}
	Variant_Type_value = map[string]int32{
		"VARIANT_NONE":              0,
		"VARIANT_INT":               1,
		"VARIANT_LONG":              2,
		"VARIANT_DOUBLE":            3,
		"VARIANT_BINARY":            4,
		"VARIANT_STRING":            5,
		"VARIANT_LIST":              6,
		"VARIANT_MAP":               7,
		"VARIANT_OBJECT":            8,
		"VARIANT_NAMESPACE":         9,
		"VARIANT_ERROR":             10,
		"VARIANT_NOT_SUPPORTED":     11,
		"VARIANT_MAX_DEPTH":         12,
		"VARIANT_FORMATTED_MESSAGE": 13,
		"VARIANT_TIME":              14,
		"VARIANT_UKNOWN_OBJECT":     15,
		"VARIANT_CODE_OBJECT":       16,
		"VARIANT_LARGE_INT":         17,
		"VARIANT_COMPLEX":           18,
		"VARIANT_UNDEFINED":         19,
		"VARIANT_DYNAMIC":           20,
		"VARIANT_ENUM":              21,
		"VARIANT_TRACEBACK":         22,
		"VARIANT_LIVETAIL":          23,
		"VARIANT_SET":               24,
	}
)

func (x Variant_Type) Enum() *Variant_Type {
	p := new(Variant_Type)
	*p = x
	return p
}

func (x Variant_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Variant_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_variant_proto_enumTypes[0].Descriptor()
}

func (Variant_Type) Type() protoreflect.EnumType {
	return &file_variant_proto_enumTypes[0]
}

func (x Variant_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}


func (Variant_Type) EnumDescriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Type       string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Parameters *Variant `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	Exc        *Variant `protobuf:"bytes,4,opt,name=exc,proto3" json:"exc,omitempty"`
	Traceback  *Variant `protobuf:"bytes,5,opt,name=traceback,proto3" json:"traceback,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Error) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Error) GetParameters() *Variant {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Error) GetExc() *Variant {
	if x != nil {
		return x.Exc
	}
	return nil
}

func (x *Error) GetTraceback() *Variant {
	if x != nil {
		return x.Traceback
	}
	return nil
}



type Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	
	VariantType Variant_Type `protobuf:"varint,1,opt,name=variant_type,json=variantType,proto3,enum=com.rookout.Variant_Type" json:"variant_type,omitempty"`
	
	OriginalType string `protobuf:"bytes,2,opt,name=original_type,json=originalType,proto3" json:"original_type,omitempty"`
	
	Attributes []*Variant_NamedValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	
	MaxDepth bool `protobuf:"varint,4,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	
	OriginalTypeIndexInCache uint32 `protobuf:"varint,5,opt,name=original_type_index_in_cache,json=originalTypeIndexInCache,proto3" json:"original_type_index_in_cache,omitempty"`
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Value isVariant_Value `protobuf_oneof:"value"`
}

func (x *Variant) Reset() {
	*x = Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant) ProtoMessage() {}

func (x *Variant) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1}
}

func (x *Variant) GetVariantType() Variant_Type {
	if x != nil {
		return x.VariantType
	}
	return Variant_VARIANT_NONE
}

func (x *Variant) GetOriginalType() string {
	if x != nil {
		return x.OriginalType
	}
	return ""
}

func (x *Variant) GetAttributes() []*Variant_NamedValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Variant) GetMaxDepth() bool {
	if x != nil {
		return x.MaxDepth
	}
	return false
}

func (x *Variant) GetOriginalTypeIndexInCache() uint32 {
	if x != nil {
		return x.OriginalTypeIndexInCache
	}
	return 0
}

func (m *Variant) GetValue() isVariant_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Variant) GetIntValue() int32 {
	if x, ok := x.GetValue().(*Variant_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Variant) GetLongValue() int64 {
	if x, ok := x.GetValue().(*Variant_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Variant) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Variant_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Variant) GetBinaryValue() *Variant_Binary {
	if x, ok := x.GetValue().(*Variant_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *Variant) GetStringValue() *Variant_String {
	if x, ok := x.GetValue().(*Variant_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Variant) GetListValue() *Variant_List {
	if x, ok := x.GetValue().(*Variant_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *Variant) GetMapValue() *Variant_Map {
	if x, ok := x.GetValue().(*Variant_MapValue); ok {
		return x.MapValue
	}
	return nil
}

func (x *Variant) GetNamespaceValue() *Variant_Namespace {
	if x, ok := x.GetValue().(*Variant_NamespaceValue); ok {
		return x.NamespaceValue
	}
	return nil
}

func (x *Variant) GetErrorValue() *Error {
	if x, ok := x.GetValue().(*Variant_ErrorValue); ok {
		return x.ErrorValue
	}
	return nil
}

func (x *Variant) GetMessageValue() *Variant_FormattedMessage {
	if x, ok := x.GetValue().(*Variant_MessageValue); ok {
		return x.MessageValue
	}
	return nil
}

func (x *Variant) GetTimeValue() *timestamp.Timestamp {
	if x, ok := x.GetValue().(*Variant_TimeValue); ok {
		return x.TimeValue
	}
	return nil
}

func (x *Variant) GetCodeValue() *Variant_CodeObject {
	if x, ok := x.GetValue().(*Variant_CodeValue); ok {
		return x.CodeValue
	}
	return nil
}

func (x *Variant) GetLargeIntValue() *Variant_LargeInt {
	if x, ok := x.GetValue().(*Variant_LargeIntValue); ok {
		return x.LargeIntValue
	}
	return nil
}

func (x *Variant) GetComplexValue() *Variant_Complex {
	if x, ok := x.GetValue().(*Variant_ComplexValue); ok {
		return x.ComplexValue
	}
	return nil
}

func (x *Variant) GetEnumValue() *Variant_Enumeration {
	if x, ok := x.GetValue().(*Variant_EnumValue); ok {
		return x.EnumValue
	}
	return nil
}

func (x *Variant) GetTraceback() *Variant_Traceback {
	if x, ok := x.GetValue().(*Variant_Traceback_); ok {
		return x.Traceback
	}
	return nil
}

func (x *Variant) GetLivetail() *Variant_LiveTailMessage {
	if x, ok := x.GetValue().(*Variant_Livetail); ok {
		return x.Livetail
	}
	return nil
}

type isVariant_Value interface {
	isVariant_Value()
}

type Variant_IntValue struct {
	IntValue int32 `protobuf:"varint,11,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Variant_LongValue struct {
	LongValue int64 `protobuf:"varint,12,opt,name=long_value,json=longValue,proto3,oneof"`
}

type Variant_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,13,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Variant_BinaryValue struct {
	BinaryValue *Variant_Binary `protobuf:"bytes,14,opt,name=binary_value,json=binaryValue,proto3,oneof"`
}

type Variant_StringValue struct {
	StringValue *Variant_String `protobuf:"bytes,15,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Variant_ListValue struct {
	ListValue *Variant_List `protobuf:"bytes,16,opt,name=list_value,json=listValue,proto3,oneof"`
}

type Variant_MapValue struct {
	MapValue *Variant_Map `protobuf:"bytes,17,opt,name=map_value,json=mapValue,proto3,oneof"`
}

type Variant_NamespaceValue struct {
	NamespaceValue *Variant_Namespace `protobuf:"bytes,19,opt,name=namespace_value,json=namespaceValue,proto3,oneof"`
}

type Variant_ErrorValue struct {
	ErrorValue *Error `protobuf:"bytes,20,opt,name=error_value,json=errorValue,proto3,oneof"`
}

type Variant_MessageValue struct {
	MessageValue *Variant_FormattedMessage `protobuf:"bytes,23,opt,name=message_value,json=messageValue,proto3,oneof"`
}

type Variant_TimeValue struct {
	TimeValue *timestamp.Timestamp `protobuf:"bytes,24,opt,name=time_value,json=timeValue,proto3,oneof"`
}

type Variant_CodeValue struct {
	CodeValue *Variant_CodeObject `protobuf:"bytes,26,opt,name=code_value,json=codeValue,proto3,oneof"`
}

type Variant_LargeIntValue struct {
	LargeIntValue *Variant_LargeInt `protobuf:"bytes,27,opt,name=large_int_value,json=largeIntValue,proto3,oneof"`
}

type Variant_ComplexValue struct {
	ComplexValue *Variant_Complex `protobuf:"bytes,28,opt,name=complex_value,json=complexValue,proto3,oneof"`
}

type Variant_EnumValue struct {
	EnumValue *Variant_Enumeration `protobuf:"bytes,31,opt,name=enum_value,json=enumValue,proto3,oneof"`
}

type Variant_Traceback_ struct {
	Traceback *Variant_Traceback `protobuf:"bytes,32,opt,name=traceback,proto3,oneof"`
}

type Variant_Livetail struct {
	Livetail *Variant_LiveTailMessage `protobuf:"bytes,33,opt,name=livetail,proto3,oneof"`
}

func (*Variant_IntValue) isVariant_Value() {}

func (*Variant_LongValue) isVariant_Value() {}

func (*Variant_DoubleValue) isVariant_Value() {}

func (*Variant_BinaryValue) isVariant_Value() {}

func (*Variant_StringValue) isVariant_Value() {}

func (*Variant_ListValue) isVariant_Value() {}

func (*Variant_MapValue) isVariant_Value() {}

func (*Variant_NamespaceValue) isVariant_Value() {}

func (*Variant_ErrorValue) isVariant_Value() {}

func (*Variant_MessageValue) isVariant_Value() {}

func (*Variant_TimeValue) isVariant_Value() {}

func (*Variant_CodeValue) isVariant_Value() {}

func (*Variant_LargeIntValue) isVariant_Value() {}

func (*Variant_ComplexValue) isVariant_Value() {}

func (*Variant_EnumValue) isVariant_Value() {}

func (*Variant_Traceback_) isVariant_Value() {}

func (*Variant_Livetail) isVariant_Value() {}

type Variant_NamedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Variant `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Variant_NamedValue) Reset() {
	*x = Variant_NamedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_NamedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_NamedValue) ProtoMessage() {}

func (x *Variant_NamedValue) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_NamedValue) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Variant_NamedValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Variant_NamedValue) GetValue() *Variant {
	if x != nil {
		return x.Value
	}
	return nil
}

type Variant_Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalSize int32  `protobuf:"varint,1,opt,name=original_size,json=originalSize,proto3" json:"original_size,omitempty"`
	Value        []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Variant_Binary) Reset() {
	*x = Variant_Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_Binary) ProtoMessage() {}

func (x *Variant_Binary) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_Binary) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Variant_Binary) GetOriginalSize() int32 {
	if x != nil {
		return x.OriginalSize
	}
	return 0
}

func (x *Variant_Binary) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Variant_String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalSize      int32  `protobuf:"varint,1,opt,name=original_size,json=originalSize,proto3" json:"original_size,omitempty"`
	Value             string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValueIndexInCache uint32 `protobuf:"varint,3,opt,name=value_index_in_cache,json=valueIndexInCache,proto3" json:"value_index_in_cache,omitempty"` 
}

func (x *Variant_String) Reset() {
	*x = Variant_String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_String) ProtoMessage() {}

func (x *Variant_String) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_String) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Variant_String) GetOriginalSize() int32 {
	if x != nil {
		return x.OriginalSize
	}
	return 0
}

func (x *Variant_String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Variant_String) GetValueIndexInCache() uint32 {
	if x != nil {
		return x.ValueIndexInCache
	}
	return 0
}

type Variant_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	OriginalSize int32      `protobuf:"varint,2,opt,name=original_size,json=originalSize,proto3" json:"original_size,omitempty"`
	Values       []*Variant `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Variant_List) Reset() {
	*x = Variant_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_List) ProtoMessage() {}

func (x *Variant_List) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_List) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Variant_List) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Variant_List) GetOriginalSize() int32 {
	if x != nil {
		return x.OriginalSize
	}
	return 0
}

func (x *Variant_List) GetValues() []*Variant {
	if x != nil {
		return x.Values
	}
	return nil
}

type Variant_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  *Variant `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second *Variant `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *Variant_Pair) Reset() {
	*x = Variant_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_Pair) ProtoMessage() {}

func (x *Variant_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_Pair) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Variant_Pair) GetFirst() *Variant {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *Variant_Pair) GetSecond() *Variant {
	if x != nil {
		return x.Second
	}
	return nil
}

type Variant_Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalSize int32           `protobuf:"varint,1,opt,name=original_size,json=originalSize,proto3" json:"original_size,omitempty"`
	Pairs        []*Variant_Pair `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *Variant_Map) Reset() {
	*x = Variant_Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_Map) ProtoMessage() {}

func (x *Variant_Map) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_Map) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Variant_Map) GetOriginalSize() int32 {
	if x != nil {
		return x.OriginalSize
	}
	return 0
}

func (x *Variant_Map) GetPairs() []*Variant_Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type Variant_Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*Variant_NamedValue `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Variant_Namespace) Reset() {
	*x = Variant_Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_Namespace) ProtoMessage() {}

func (x *Variant_Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_Namespace) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 6}
}

func (x *Variant_Namespace) GetAttributes() []*Variant_NamedValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Variant_FormattedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Variant_FormattedMessage) Reset() {
	*x = Variant_FormattedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_FormattedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_FormattedMessage) ProtoMessage() {}

func (x *Variant_FormattedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_FormattedMessage) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 7}
}

func (x *Variant_FormattedMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Variant_CodeObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Module               string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Filename             string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Lineno               uint32 `protobuf:"varint,4,opt,name=lineno,proto3" json:"lineno,omitempty"`
	NameIndexInCache     uint32 `protobuf:"varint,5,opt,name=name_index_in_cache,json=nameIndexInCache,proto3" json:"name_index_in_cache,omitempty"`             
	ModuleIndexInCache   uint32 `protobuf:"varint,6,opt,name=module_index_in_cache,json=moduleIndexInCache,proto3" json:"module_index_in_cache,omitempty"`       
	FilenameIndexInCache uint32 `protobuf:"varint,7,opt,name=filename_index_in_cache,json=filenameIndexInCache,proto3" json:"filename_index_in_cache,omitempty"` 
}

func (x *Variant_CodeObject) Reset() {
	*x = Variant_CodeObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_CodeObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_CodeObject) ProtoMessage() {}

func (x *Variant_CodeObject) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_CodeObject) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 8}
}

func (x *Variant_CodeObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Variant_CodeObject) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *Variant_CodeObject) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Variant_CodeObject) GetLineno() uint32 {
	if x != nil {
		return x.Lineno
	}
	return 0
}

func (x *Variant_CodeObject) GetNameIndexInCache() uint32 {
	if x != nil {
		return x.NameIndexInCache
	}
	return 0
}

func (x *Variant_CodeObject) GetModuleIndexInCache() uint32 {
	if x != nil {
		return x.ModuleIndexInCache
	}
	return 0
}

func (x *Variant_CodeObject) GetFilenameIndexInCache() uint32 {
	if x != nil {
		return x.FilenameIndexInCache
	}
	return 0
}

type Variant_LargeInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Variant_LargeInt) Reset() {
	*x = Variant_LargeInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_LargeInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_LargeInt) ProtoMessage() {}

func (x *Variant_LargeInt) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_LargeInt) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 9}
}

func (x *Variant_LargeInt) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Variant_Complex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Real      float64 `protobuf:"fixed64,1,opt,name=real,proto3" json:"real,omitempty"`
	Imaginary float64 `protobuf:"fixed64,2,opt,name=imaginary,proto3" json:"imaginary,omitempty"`
}

func (x *Variant_Complex) Reset() {
	*x = Variant_Complex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_Complex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_Complex) ProtoMessage() {}

func (x *Variant_Complex) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_Complex) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 10}
}

func (x *Variant_Complex) GetReal() float64 {
	if x != nil {
		return x.Real
	}
	return 0
}

func (x *Variant_Complex) GetImaginary() float64 {
	if x != nil {
		return x.Imaginary
	}
	return 0
}

type Variant_Enumeration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue  string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	OrdinalValue int32  `protobuf:"varint,2,opt,name=ordinal_value,json=ordinalValue,proto3" json:"ordinal_value,omitempty"`
	TypeName     string `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
}

func (x *Variant_Enumeration) Reset() {
	*x = Variant_Enumeration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_Enumeration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_Enumeration) ProtoMessage() {}

func (x *Variant_Enumeration) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_Enumeration) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 11}
}

func (x *Variant_Enumeration) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *Variant_Enumeration) GetOrdinalValue() int32 {
	if x != nil {
		return x.OrdinalValue
	}
	return 0
}

func (x *Variant_Enumeration) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

type Variant_Traceback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*Variant_CodeObject `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *Variant_Traceback) Reset() {
	*x = Variant_Traceback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_Traceback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_Traceback) ProtoMessage() {}

func (x *Variant_Traceback) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_Traceback) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 12}
}

func (x *Variant_Traceback) GetLocations() []*Variant_CodeObject {
	if x != nil {
		return x.Locations
	}
	return nil
}

type Variant_LiveTailMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelName        string            `protobuf:"bytes,1,opt,name=level_name,json=levelName,proto3" json:"level_name,omitempty"`
	Msg              string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	FormattedMessage string            `protobuf:"bytes,3,opt,name=formatted_message,json=formattedMessage,proto3" json:"formatted_message,omitempty"`
	Time             float64           `protobuf:"fixed64,4,opt,name=time,proto3" json:"time,omitempty"`
	Filename         string            `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	Lineno           int32             `protobuf:"varint,6,opt,name=lineno,proto3" json:"lineno,omitempty"`
	Function         string            `protobuf:"bytes,7,opt,name=function,proto3" json:"function,omitempty"`
	Module           string            `protobuf:"bytes,8,opt,name=module,proto3" json:"module,omitempty"`
	ThreadId         int64             `protobuf:"varint,9,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ThreadName       string            `protobuf:"bytes,10,opt,name=thread_name,json=threadName,proto3" json:"thread_name,omitempty"`
	LogContext       map[string]string `protobuf:"bytes,11,rep,name=log_context,json=logContext,proto3" json:"log_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Variant_LiveTailMessage) Reset() {
	*x = Variant_LiveTailMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_variant_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant_LiveTailMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant_LiveTailMessage) ProtoMessage() {}

func (x *Variant_LiveTailMessage) ProtoReflect() protoreflect.Message {
	mi := &file_variant_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}


func (*Variant_LiveTailMessage) Descriptor() ([]byte, []int) {
	return file_variant_proto_rawDescGZIP(), []int{1, 13}
}

func (x *Variant_LiveTailMessage) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *Variant_LiveTailMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Variant_LiveTailMessage) GetFormattedMessage() string {
	if x != nil {
		return x.FormattedMessage
	}
	return ""
}

func (x *Variant_LiveTailMessage) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Variant_LiveTailMessage) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Variant_LiveTailMessage) GetLineno() int32 {
	if x != nil {
		return x.Lineno
	}
	return 0
}

func (x *Variant_LiveTailMessage) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *Variant_LiveTailMessage) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *Variant_LiveTailMessage) GetThreadId() int64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *Variant_LiveTailMessage) GetThreadName() string {
	if x != nil {
		return x.ThreadName
	}
	return ""
}

func (x *Variant_LiveTailMessage) GetLogContext() map[string]string {
	if x != nil {
		return x.LogContext
	}
	return nil
}

var File_variant_proto protoreflect.FileDescriptor

var file_variant_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x65,
	0x78, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72,
	0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x03,
	0x65, 0x78, 0x63, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f,
	0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xcb, 0x1b, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6d, 0x61, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75,
	0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x72,
	0x67, 0x65, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75,
	0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x42, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f,
	0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x54,
	0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69,
	0x76, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x4c, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f,
	0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x43, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x74, 0x0a, 0x06, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x1a,
	0x6d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x60,
	0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x1a, 0x5b, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x05,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x1a, 0x4c, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x10, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x85, 0x02, 0x0a, 0x0a, 0x43, 0x6f,
	0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x1a, 0x20, 0x0a, 0x08, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x3b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x65,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x1a, 0x72, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4a, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f,
	0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0xbf, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0b,
	0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x69, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x97, 0x04, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42,
	0x4c, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f,
	0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x07, 0x12,
	0x12, 0x0a, 0x0e, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41,
	0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a,
	0x15, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0x0c, 0x12,
	0x1d, 0x0a, 0x19, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x10,
	0x0a, 0x0c, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0e,
	0x12, 0x19, 0x0a, 0x15, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x10, 0x12,
	0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x4e, 0x54, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x15, 0x12, 0x15,
	0x0a, 0x11, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54,
	0x5f, 0x4c, 0x49, 0x56, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x18, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4f, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x6f,
	0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x72, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52,
	0x6f, 0x6f, 0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_variant_proto_rawDescOnce sync.Once
	file_variant_proto_rawDescData = file_variant_proto_rawDesc
)

func file_variant_proto_rawDescGZIP() []byte {
	file_variant_proto_rawDescOnce.Do(func() {
		file_variant_proto_rawDescData = protoimpl.X.CompressGZIP(file_variant_proto_rawDescData)
	})
	return file_variant_proto_rawDescData
}

var file_variant_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_variant_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_variant_proto_goTypes = []interface{}{
	(Variant_Type)(0),                
	(*Error)(nil),                    
	(*Variant)(nil),                  
	(*Variant_NamedValue)(nil),       
	(*Variant_Binary)(nil),           
	(*Variant_String)(nil),           
	(*Variant_List)(nil),             
	(*Variant_Pair)(nil),             
	(*Variant_Map)(nil),              
	(*Variant_Namespace)(nil),        
	(*Variant_FormattedMessage)(nil), 
	(*Variant_CodeObject)(nil),       
	(*Variant_LargeInt)(nil),         
	(*Variant_Complex)(nil),          
	(*Variant_Enumeration)(nil),      
	(*Variant_Traceback)(nil),        
	(*Variant_LiveTailMessage)(nil),  
	nil,                              
	(*timestamp.Timestamp)(nil),      
}
var file_variant_proto_depIdxs = []int32{
	2,  
	2,  
	2,  
	0,  
	3,  
	4,  
	5,  
	6,  
	8,  
	9,  
	1,  
	10, 
	18, 
	11, 
	12, 
	13, 
	14, 
	15, 
	16, 
	2,  
	2,  
	2,  
	2,  
	7,  
	3,  
	11, 
	17, 
	27, 
	27, 
	27, 
	27, 
	0,  
}

func init() { file_variant_proto_init() }
func file_variant_proto_init() {
	if File_variant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_variant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_NamedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_FormattedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_CodeObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_LargeInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_Complex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_Enumeration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_Traceback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_variant_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant_LiveTailMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_variant_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Variant_IntValue)(nil),
		(*Variant_LongValue)(nil),
		(*Variant_DoubleValue)(nil),
		(*Variant_BinaryValue)(nil),
		(*Variant_StringValue)(nil),
		(*Variant_ListValue)(nil),
		(*Variant_MapValue)(nil),
		(*Variant_NamespaceValue)(nil),
		(*Variant_ErrorValue)(nil),
		(*Variant_MessageValue)(nil),
		(*Variant_TimeValue)(nil),
		(*Variant_CodeValue)(nil),
		(*Variant_LargeIntValue)(nil),
		(*Variant_ComplexValue)(nil),
		(*Variant_EnumValue)(nil),
		(*Variant_Traceback_)(nil),
		(*Variant_Livetail)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_variant_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_variant_proto_goTypes,
		DependencyIndexes: file_variant_proto_depIdxs,
		EnumInfos:         file_variant_proto_enumTypes,
		MessageInfos:      file_variant_proto_msgTypes,
	}.Build()
	File_variant_proto = out.File
	file_variant_proto_rawDesc = nil
	file_variant_proto_goTypes = nil
	file_variant_proto_depIdxs = nil
}
